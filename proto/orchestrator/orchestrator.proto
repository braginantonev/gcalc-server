syntax = "proto3"; // версия proto файлов
package orchestrator; // название пакета
option go_package = "github.com/braginantonev/gcalc-server/proto/orchestrator";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// Expression and task statuses

enum ETStatus {
    Analyze = 0;
    Backlog = 1;
    IsWaitingValues = 2;
    InProgress = 3;
    Complete = 4;
}

message Argument {
    double value = 1;
    int32 expected = 2;
}

// Expression

message ExpressionID {
    string user = 1;
    int32 internal = 2;
}

message Expression {
    ExpressionID id = 1;
    ETStatus status = 2;
    string str = 3;
    double result = 4;
}

message AddedExpression {
    string user = 1;
    string str = 2;
}

message Expressions {
    repeated Expression queue = 1;
}

// Task

message TaskID {
    ExpressionID expression = 1;
    int32 internal = 2;
}

message Task {
    TaskID id = 1;
    Argument first_argument = 2;
    Argument second_argument = 3;
    string operation = 4;
    ETStatus status = 5;
    bool isLast = 6;
    string str = 7;
    double answer = 8;
}

message TaskResult {
    TaskID taskID = 1;
    double result = 2;
    string error = 3;
}

service OrchestratorService {
    rpc GetTask (TaskID) returns (Task);    // GetTask()
    rpc SaveTaskResult (TaskResult) returns (google.protobuf.Empty);    // SetExampleResult() - return error
    rpc AddExpression (AddedExpression) returns (google.protobuf.Int32Value); // AddExpression()
    rpc GetExpressions (google.protobuf.StringValue) returns (Expressions);   // GetExpressionsQueue()
    rpc GetExpression (ExpressionID) returns (Expression);    // GetExpression()
}